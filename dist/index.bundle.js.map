{"version":3,"file":"index.bundle.js","mappings":"mBAAO,MAAMA,EAET,MAAAC,CAAOC,GACH,MAAMC,EAAkBC,KAAKC,UAAUH,GAEvCI,aAAaC,QAAQ,YAAaJ,EACtC,CAEA,cAAAK,G,MACA,MAAML,EAAmD,QAAjC,EAAAG,aAAaG,QAAQ,oBAAY,QAAI,gBAG7D,OAD4BL,KAAKM,MAAMP,EAEvC,ECbJ,IAAYQ,GAAZ,SAAYA,GACR,uBACA,yBACA,kBACH,CAJD,CAAYA,IAAAA,EAAa,KAMlB,MAAMC,EAUT,WAAAC,GACIC,KAAKC,gBACT,CAEA,cAAAA,GACID,KAAKE,SAAWF,KAAKG,qBACrBH,KAAKI,eACDJ,KAAKK,gBAAgBL,KAAKE,SAASI,KAAKC,MAAMD,KAAKE,SAAWR,KAAKE,SAASO,UAAUC,MAAM,IAChGV,KAAKW,kBAAoBX,KAAKI,eAAeQ,KAAIC,GAAKhB,EAAciB,OACpEd,KAAKe,WAAa,EAClBf,KAAKgB,YAAa,EAClBhB,KAAKiB,QAAS,EACdjB,KAAKkB,UAAY,EACrB,CAEA,SAAAC,GAcI,OAb4E,GAAxEnB,KAAKW,kBAAkBS,QAAOC,GAAKA,GAAKxB,EAAcyB,SAAQb,QAC9DT,KAAKe,aACLf,KAAKiB,QAAS,EACdjB,KAAKgB,YAAa,EAClBhB,KAAKkB,UAAY,gBAGO,GAAnBlB,KAAKe,aACVf,KAAKiB,QAAS,EACdjB,KAAKgB,YAAa,EAClBhB,KAAKkB,UAAY,8BAAgClB,KAAKI,eAAemB,KAAK,IAAIC,eAG3ExB,KAAKgB,UAChB,CAEA,kBAAAS,CAAmBC,GACfA,EAAUA,EAAQC,cAClB,IAAK,IAAIC,EAAI,EAAGA,EAAI5B,KAAKI,eAAeK,OAAQmB,IACxCF,EAAQE,IAAM5B,KAAKI,eAAewB,GAClC5B,KAAKW,kBAAkBiB,GAAK/B,EAAcyB,OAErCtB,KAAKI,eAAeyB,SAASH,EAAQE,IAC1C5B,KAAKW,kBAAkBiB,GAAK/B,EAAciC,QAG1C9B,KAAKW,kBAAkBiB,GAAK/B,EAAciB,KAIlD,OADAd,KAAKe,aACEf,KAAKW,iBAChB,CAEA,kBAAAR,GA0CI,MAxCI,CACI,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAGlE,CAEA,eAAAE,CAAgBqB,GACZ,IAAIK,EAAU,iDAAiDrB,MAAM,IACjEsB,EAAU,iDAAiDtB,MAAM,IAErE,IAAK,IAAIkB,EAAI,EAAGA,EAAIG,EAAQtB,OAAQmB,IAChCF,EAAUA,EAAQO,QAAQF,EAAQH,GAAII,EAAQJ,IAElD,OAAOF,CACX,CAEA,eAAAQ,GACI,OAAOlC,KAAKe,UAChB,CAEA,cAAAoB,GACI,OAAOnC,KAAKkB,SAChB,EC1HJ,MAAMkB,EAgBF,WAAArC,GACIC,KAAKqC,SAAWC,SAASC,eAAe,YACxCvC,KAAKwC,WAAaF,SAASC,eAAe,cAC1CvC,KAAKyC,SAAWH,SAASC,eAAe,YACxCvC,KAAK0C,cAAgBJ,SAASC,eAAe,iBAC7CvC,KAAK2C,YAAcL,SAASC,eAAe,eAE3CvC,KAAK4C,MAAQ,EACb5C,KAAK6C,OAAS,EACd7C,KAAK8C,MAAQ,IAAIhD,EAEjBE,KAAK+C,eAAiB,GACtB/C,KAAKgD,SAAW,IAAI9D,EACpBc,KAAKZ,UAAYY,KAAKgD,SAAStD,iBAC/BM,KAAKiD,qBAELjD,KAAKkD,mBAELC,QAAQC,IAAIpD,KAAK8C,MAAM1C,eAAemB,KAAK,IAC/C,CAEA,gBAAA2B,GACIlD,KAAKwC,WAAWa,WAAWC,SAAQC,IAC/B,MAAMC,EAAQD,EACE,YAAZC,EAAMC,IACND,EAAME,iBAAiB,SAAUC,GAAW3D,KAAK4D,cAAcD,I,IAIvE3D,KAAKyC,SAASiB,iBAAiB,SAAS,IAAM1D,KAAK6D,kBACvD,CAEA,aAAAD,CAAcD,GACV,MAAMH,EAA2BG,EAAOG,OAEtB,GAAd9D,KAAK4C,QAIT5C,KAAK+C,eAAegB,KAAKP,GAEXlB,SAAS0B,iBAAiB,UAGhB,EAAdhE,KAAK6C,OAAa7C,KAAK4C,OAE3BqB,YAAcT,EAAMS,YAE1BjE,KAAK4C,QACT,CAEA,cAAAiB,GACI,GAAI7D,KAAK8C,MAAM9B,WAEX,YADAhB,KAAKkE,cAIT,GAAkB,GAAdlE,KAAK4C,MACL,OAGJ,IAAIlB,EAAkB,GAEtB,MAAMyC,EAAQ7B,SAAS0B,iBAAiB,UAExC,IAAK,IAAIpC,EAAkB,EAAd5B,KAAK6C,OAAYjB,EAAkB,EAAd5B,KAAK6C,OAAa,EAAGjB,IACnDF,GAAYyC,EAAMvC,GAAsBqC,YAG5C,MAAM/C,EAA6BlB,KAAK8C,MAAMrB,mBAAmBC,GAEjE1B,KAAKoE,gBAAgBlD,GAErBlB,KAAK6C,SACL7C,KAAK4C,MAAQ,EAEb5C,KAAKqE,oBACT,CAEA,eAAAD,CAAgBlD,GACZ,MAAMiD,EAAQ7B,SAAS0B,iBAAiB,UAExC,IAAIM,EAAI,EACR,IAAK,IAAI1C,EAAkB,EAAd5B,KAAK6C,OAAYjB,EAAkB,EAAd5B,KAAK6C,OAAa,EAAGjB,IAAK,CACxD,MAAM2C,EAASJ,EAAMvC,GAEjBV,EAAUoD,IAAMzE,EAAcyB,OAC9BiD,EAAOC,MAAMC,gBAAkB,UAG1BvD,EAAUoD,IAAMzE,EAAciC,QACnCyC,EAAOC,MAAMC,gBAAkB,WAI/BF,EAAOC,MAAMC,gBAAkB,UAC/BzE,KAAK+C,eAAeuB,GAAGI,UAAW,GAGtCJ,G,CAGJtE,KAAK+C,eAAiB,EAC1B,CAEA,kBAAAsB,GACI,IAAKrE,KAAK8C,MAAM3B,YACZ,OAGJ,MAAMD,EAAYlB,KAAK8C,MAAMX,iBAE7BnC,KAAK0C,cAAc8B,MAAMG,QAAU,SACnC3E,KAAK0C,cAAcuB,YAAc/C,EAE7BlB,KAAK8C,MAAM7B,OACXjB,KAAK0C,cAAckC,UAAY,qBAI/B5E,KAAK0C,cAAckC,UAAY,mBAGnC5E,KAAKwC,WAAWa,WAAWC,SAAQC,IAC/B,MAAMC,EAAQD,EACE,YAAZC,EAAMC,KACND,EAAMkB,UAAW,E,IAIzB1E,KAAK6E,iBACT,CAEA,WAAAX,GACIlE,KAAK4C,MAAQ,EACb5C,KAAK6C,OAAS,EACd7C,KAAK8C,MAAM7C,iBAEXD,KAAKwC,WAAWa,WAAWC,SAAQC,IACjBA,EACRmB,UAAW,CAAK,IAG1B,MAAMP,EAAQ7B,SAAS0B,iBAAiB,UAExC,IAAK,IAAIpC,EAAI,EAAGA,EAAIuC,EAAM1D,OAAQmB,IAAK,CACnC,MAAM2C,EAASJ,EAAMvC,GACrB2C,EAAON,YAAc,GACrBM,EAAOC,MAAMC,gBAAkB,S,CAGnCzE,KAAK0C,cAAc8B,MAAMG,QAAU,OACnC3E,KAAK+C,eAAiB,GAEtB/C,KAAKZ,UAAYY,KAAKgD,SAAStD,iBAC/ByD,QAAQC,IAAIpD,KAAK8C,MAAM1C,eAAemB,KAAK,IAC/C,CAEA,eAAAsD,GACI7E,KAAKZ,UAAU,EAAIY,KAAK8C,MAAMZ,qBAC9BlC,KAAKgD,SAAS7D,OAAOa,KAAKZ,WAE1BY,KAAKiD,oBACT,CAEA,kBAAAA,GACI,MAAMkB,EAAQnE,KAAK2C,YAAYmC,SAE/B,IAAI,IAAIlD,EAAI,EAAGA,EAAIuC,EAAM1D,OAAQmB,IAC7BuC,EAAMvC,GAAGqC,YAAc,GAAKjE,KAAKZ,UAAUwC,EAEnD,EAGJmD,OAAOrB,iBAAiB,QAAQ,IAAM,IAAItB,G","sources":["webpack://termo-ts/./src/views/gravadorHistorico.ts","webpack://termo-ts/./src/views/termo.ts","webpack://termo-ts/./src/views/tela-termo.ts"],"sourcesContent":["export class Gravador {\n\n    gravar(historico: number[]): void {\n        const historicoString = JSON.stringify(historico);\n\n        localStorage.setItem('historico', historicoString);\n    }\n\n    obterHistorico(): number[] {\n    const historicoString = localStorage.getItem('historico') ?? '[0,0,0,0,0,0]';\n\n    const historico: number[] = JSON.parse(historicoString);\n    return historico;\n    }\n}","export enum resultadoEnum {\n    Acerto,\n    Contido,\n    Erro\n}\n\nexport class Termo {\n\n    palavras: string[];\n    palavraSecreta: string[];\n    letrasDescobertas: resultadoEnum[];\n    tentativas: number;\n    jogoAcabou: boolean;\n    venceu: boolean;\n    resultado: string;\n\n    constructor() {\n        this.iniciarValores();\n    }\n\n    iniciarValores(): void {\n        this.palavras = this.criarArrayPalavras();\n        this.palavraSecreta =\n            this.formatarPalavra(this.palavras[Math.floor(Math.random() * this.palavras.length)]).split('');\n        this.letrasDescobertas = this.palavraSecreta.map(p => resultadoEnum.Erro);\n        this.tentativas = 5;\n        this.jogoAcabou = false;\n        this.venceu = false;\n        this.resultado = \"\";\n    }\n\n    fimDeJogo(): boolean {\n        if (this.letrasDescobertas.filter(l => l != resultadoEnum.Acerto).length == 0) {\n            this.tentativas++;\n            this.venceu = true;\n            this.jogoAcabou = true;\n            this.resultado = \"Você venceu!\";\n        }\n\n        else if (this.tentativas == 0) {\n            this.venceu = false;\n            this.jogoAcabou = true;\n            this.resultado = \"Você perdeu! A palavra era \" + this.palavraSecreta.join('').toUpperCase();\n        }\n\n        return this.jogoAcabou;\n    }\n\n    verificacaoPalavra(palavra: string): resultadoEnum[] {\n        palavra = palavra.toLowerCase();\n        for (let i = 0; i < this.palavraSecreta.length; i++) {\n            if (palavra[i] == this.palavraSecreta[i]) {\n                this.letrasDescobertas[i] = resultadoEnum.Acerto;\n            }\n            else if (this.palavraSecreta.includes(palavra[i])) {\n                this.letrasDescobertas[i] = resultadoEnum.Contido;\n            }\n            else {\n                this.letrasDescobertas[i] = resultadoEnum.Erro;\n            }\n        }\n        this.tentativas--;\n        return this.letrasDescobertas;\n    }\n\n    criarArrayPalavras(): string[] {\n        const palavras: string[] =\n            [\n                \"ácido\", \"adiar\", \"ímpar\", \"algar\", \"amado\", \"amigo\", \"anexo\", \"anuir\", \"aonde\", \"apelo\",\n                \"aquém\", \"argil\", \"arroz\", \"assar\", \"atrás\", \"ávido\", \"azeri\", \"babar\", \"bagre\", \"banho\",\n                \"barco\", \"bicho\", \"bolor\", \"brasa\", \"brava\", \"brisa\", \"bruto\", \"bulir\", \"caixa\", \"cansa\",\n                \"chato\", \"chave\", \"chefe\", \"choro\", \"chulo\", \"claro\", \"cobre\", \"corte\", \"curar\", \"deixo\",\n                \"dizer\", \"dogma\", \"dores\", \"duque\", \"enfim\", \"estou\", \"exame\", \"falar\", \"fardo\", \"farto\",\n                \"fatal\", \"feliz\", \"ficar\", \"fogue\", \"força\", \"forno\", \"fraco\", \"fugir\", \"fundo\", \"fúria\",\n                \"gaita\", \"gasto\", \"geada\", \"gelar\", \"gosto\", \"grito\", \"gueto\", \"honra\", \"humor\", \"idade\",\n                \"ideia\", \"ídolo\", \"igual\", \"imune\", \"índio\", \"íngua\", \"irado\", \"isola\", \"janta\", \"jovem\",\n                \"juizo\", \"largo\", \"laser\", \"leite\", \"lento\", \"lerdo\", \"levar\", \"lidar\", \"lindo\", \"lírio\",\n                \"longe\", \"luzes\", \"magro\", \"maior\", \"malte\", \"mamar\", \"manto\", \"marca\", \"matar\", \"meigo\",\n                \"meios\", \"melão\", \"mesmo\", \"metro\", \"mimos\", \"moeda\", \"moita\", \"molho\", \"morno\", \"morro\",\n                \"motim\", \"muito\", \"mural\", \"naipe\", \"nasci\", \"natal\", \"naval\", \"ninar\", \"nível\", \"nobre\",\n                \"noite\", \"norte\", \"nuvem\", \"oeste\", \"ombro\", \"ordem\", \"órgão\", \"ósseo\", \"ossos\", \"outro\",\n                \"ouvir\", \"palma\", \"pardo\", \"passe\", \"pátio\", \"peito\", \"pêlos\", \"perdo\", \"períl\", \"perto\",\n                \"pezar\", \"piano\", \"picar\", \"pilar\", \"pingo\", \"pione\", \"pista\", \"poder\", \"porém\", \"prado\",\n                \"prato\", \"prazo\", \"preço\", \"prima\", \"primo\", \"pular\", \"quero\", \"quota\", \"raiva\", \"rampa\",\n                \"rango\", \"reais\", \"reino\", \"rezar\", \"risco\", \"roçar\", \"rosto\", \"roubo\", \"russo\", \"saber\",\n                \"sacar\", \"salto\", \"samba\", \"santo\", \"selar\", \"selos\", \"senso\", \"serão\", \"serra\", \"servo\",\n                \"sexta\", \"sinal\", \"sobra\", \"sobre\", \"sócio\", \"sorte\", \"subir\", \"sujei\", \"sujos\", \"talão\",\n                \"talha\", \"tanga\", \"tarde\", \"tempo\", \"tenho\", \"terço\", \"terra\", \"tesão\", \"tocar\", \"lacre\",\n                \"laico\", \"lamba\", \"lambo\", \"largo\", \"larva\", \"lasca\", \"laser\", \"laura\", \"lavra\", \"leigo\",\n                \"leite\", \"leito\", \"leiva\", \"lenho\", \"lento\", \"leque\", \"lerdo\", \"lesão\", \"lesma\", \"levar\",\n                \"libra\", \"limbo\", \"lindo\", \"líneo\", \"lírio\", \"lisar\", \"lista\", \"livro\", \"logar\", \"lombo\",\n                \"lotes\", \"louca\", \"louco\", \"louro\", \"lugar\", \"luzes\", \"macio\", \"maçom\", \"maior\", \"malha\",\n                \"malte\", \"mamar\", \"mamãe\", \"manto\", \"março\", \"maria\", \"marra\", \"marta\", \"matar\", \"medir\",\n                \"meigo\", \"meios\", \"melão\", \"menta\", \"menti\", \"mesmo\", \"metro\", \"miado\", \"mídia\", \"mielo\",\n                \"mielo\", \"milho\", \"mimos\", \"minar\", \"minha\", \"miolo\", \"mirar\", \"missa\", \"mitos\", \"moeda\",\n                \"moído\", \"moita\", \"molde\", \"molho\", \"monar\", \"monja\", \"moral\", \"morar\", \"morda\", \"morfo\",\n                \"morte\", \"mosca\", \"mosco\", \"motim\", \"motor\", \"mudar\", \"muito\", \"mular\", \"mulas\", \"múmia\",\n                \"mural\", \"extra\", \"falar\", \"falta\", \"fardo\", \"farol\", \"farto\", \"fatal\", \"feixe\", \"festa\",\n                \"feudo\", \"fezes\", \"fiapo\", \"fibra\", \"ficha\", \"fidel\", \"filão\", \"filho\", \"firma\", \"fisco\",\n                \"fisga\", \"fluir\", \"força\", \"forma\", \"forte\", \"fraco\", \"frade\", \"friso\", \"frito\", \"fugaz\",\n                \"fugir\", \"fundo\", \"furor\", \"furto\", \"fuzil\", \"gabar\", \"gaita\", \"galho\", \"ganho\", \"garoa\",\n                \"garra\", \"garro\", \"garvo\", \"gasto\", \"gaupe\", \"gazua\", \"geada\", \"gemer\", \"germe\", \"gigas\",\n                \"girar\", \"gizar\", \"globo\", \"gosto\", \"grãos\", \"graça\", \"grava\", \"grito\", \"grude\", \"haver\",\n                \"haver\", \"hiato\", \"hidra\", \"hífen\", \"hímel\", \"horas\", \"hotel\", \"humor\", \"ideal\", \"ídolo\",\n                \"igual\", \"ileso\", \"imune\", \"irado\", \"isola\", \"jarra\", \"jaula\", \"jegue\", \"jeito\", \"jogar\",\n                \"jovem\", \"juíza\", \"juizo\", \"julho\", \"junho\", \"jurar\", \"justa\"\n            ];\n        return palavras;\n    }\n\n    formatarPalavra(palavra: string): string {\n        let acentos = \"ÄÅÁÂÀÃäáâàãÉÊËÈéêëèÍÎÏÌíîïìÖÓÔÒÕöóôòõÜÚÛüúûùÇç\".split('');\n        let formato = \"AAAAAAaaaaaEEEEeeeeIIIIiiiiOOOOOoooooUUUuuuuCc\".split('');\n\n        for (let i = 0; i < acentos.length; i++) {\n            palavra = palavra.replace(acentos[i], formato[i]);\n        }\n        return palavra;\n    }\n\n    obterTentativas(): number {\n        return this.tentativas;\n    }\n\n    obterResultado(): string {\n        return this.resultado;\n    }\n}","import { Gravador } from \"./gravadorHistorico\";\nimport { Termo, resultadoEnum } from \"./termo\";\n\n\nclass telaTermo {\n    pnlTermo: HTMLDivElement;\n    pnlTeclado: HTMLDivElement;\n    btnEnter: HTMLButtonElement;\n    lbNotificacao: HTMLParagraphElement;\n    trHistorico: HTMLTableRowElement;\n\n    linha: number;\n    coluna: number;\n    termo: Termo;\n\n    botoesClicados: HTMLButtonElement[];\n\n    gravador: Gravador;\n    historico: number[];\n\n    constructor() {\n        this.pnlTermo = document.getElementById('pnlTermo') as HTMLDivElement;\n        this.pnlTeclado = document.getElementById('pnlTeclado') as HTMLDivElement;\n        this.btnEnter = document.getElementById('btnEnter') as HTMLButtonElement;\n        this.lbNotificacao = document.getElementById('lbNotificacao') as HTMLParagraphElement;\n        this.trHistorico = document.getElementById('trHistorico') as HTMLTableRowElement;\n \n        this.linha = 0;\n        this.coluna = 0;\n        this.termo = new Termo();\n\n        this.botoesClicados = [];\n        this.gravador = new Gravador();\n        this.historico = this.gravador.obterHistorico();\n        this.atualizarHistorico();\n\n        this.registrarEventos();\n\n        console.log(this.termo.palavraSecreta.join(''));\n    }\n\n    registrarEventos(): void {\n        this.pnlTeclado.childNodes.forEach(b => {\n            const botao = b as HTMLButtonElement;\n            if (botao.id != \"btnEnter\") {\n                botao.addEventListener('click', (sender) => this.atualizarJogo(sender));\n            }\n        });\n\n        this.btnEnter.addEventListener('click', () => this.avaliarPalavra());\n    }\n\n    atualizarJogo(sender: MouseEvent): void {\n        const botao: HTMLButtonElement = sender.target as HTMLButtonElement;\n\n        if (this.linha == 5) {\n            return;\n        }\n\n        this.botoesClicados.push(botao);\n\n        const lista = document.querySelectorAll(\".letra\");\n\n        const letra: HTMLDivElement =\n            lista[this.coluna * 5 + this.linha] as HTMLDivElement;\n\n        letra.textContent = botao.textContent;\n\n        this.linha++;\n    }\n\n    avaliarPalavra(): void {\n        if (this.termo.jogoAcabou) {\n            this.resetarJogo();\n            return;\n        }\n\n        if (this.linha != 5) {\n            return;\n        }\n\n        let palavra: string = \"\";\n\n        const lista = document.querySelectorAll(\".letra\");\n\n        for (let i = this.coluna * 5; i < this.coluna * 5 + 5; i++) {\n            palavra += (lista[i] as HTMLDivElement).textContent;\n        }\n\n        const resultado: resultadoEnum[] = this.termo.verificacaoPalavra(palavra);\n\n        this.atualizarEstilo(resultado);\n\n        this.coluna++;\n        this.linha = 0;\n\n        this.verificarResultado();\n    }\n\n    atualizarEstilo(resultado: resultadoEnum[]) {\n        const lista = document.querySelectorAll(\".letra\");\n\n        let j = 0;\n        for (let i = this.coluna * 5; i < this.coluna * 5 + 5; i++) {\n            const celula = lista[i] as HTMLDivElement;\n\n            if (resultado[j] == resultadoEnum.Acerto) {\n                celula.style.backgroundColor = \"#22dd55\";\n            }\n\n            else if (resultado[j] == resultadoEnum.Contido) {\n                celula.style.backgroundColor = \"#eded00\";\n            }\n\n            else {\n                celula.style.backgroundColor = \"#5e5e5e\";\n                this.botoesClicados[j].disabled = true;\n            }\n\n            j++;\n        }\n\n        this.botoesClicados = [];\n    }\n\n    verificarResultado(): void {\n        if (!this.termo.fimDeJogo()) {\n            return;\n        }\n\n        const resultado = this.termo.obterResultado();\n\n        this.lbNotificacao.style.display = \"inline\";\n        this.lbNotificacao.textContent = resultado;\n\n        if (this.termo.venceu) {\n            this.lbNotificacao.className = \"notificacao-acerto\";\n        }\n\n        else {\n            this.lbNotificacao.className = \"notificacao-erro\";\n        }\n\n        this.pnlTeclado.childNodes.forEach(b => {\n            const botao = b as HTMLButtonElement;\n            if (botao.id != \"btnEnter\") {\n                botao.disabled = true;\n            }\n        });\n\n        this.gravarHistorico();\n    }\n\n    resetarJogo(): void {\n        this.linha = 0;\n        this.coluna = 0;\n        this.termo.iniciarValores();\n\n        this.pnlTeclado.childNodes.forEach(b => {\n            const botao = b as HTMLButtonElement;\n            botao.disabled = false;\n        });\n\n        const lista = document.querySelectorAll(\".letra\");\n\n        for (let i = 0; i < lista.length; i++) {\n            const celula = lista[i] as HTMLDivElement;\n            celula.textContent = \"\";\n            celula.style.backgroundColor = \"#bebebe\";\n        }\n\n        this.lbNotificacao.style.display = \"none\";\n        this.botoesClicados = [];\n\n        this.historico = this.gravador.obterHistorico();\n        console.log(this.termo.palavraSecreta.join(''));\n    }\n\n    gravarHistorico(){\n        this.historico[5 - this.termo.obterTentativas()]++;\n        this.gravador.gravar(this.historico);\n\n        this.atualizarHistorico();\n    }\n\n    atualizarHistorico(){\n        const lista = this.trHistorico.children;\n\n        for(let i = 0; i < lista.length; i++) {\n            lista[i].textContent = \"\" + this.historico[i];\n        }\n    }\n}\n\nwindow.addEventListener('load', () => new telaTermo());"],"names":["Gravador","gravar","historico","historicoString","JSON","stringify","localStorage","setItem","obterHistorico","getItem","parse","resultadoEnum","Termo","constructor","this","iniciarValores","palavras","criarArrayPalavras","palavraSecreta","formatarPalavra","Math","floor","random","length","split","letrasDescobertas","map","p","Erro","tentativas","jogoAcabou","venceu","resultado","fimDeJogo","filter","l","Acerto","join","toUpperCase","verificacaoPalavra","palavra","toLowerCase","i","includes","Contido","acentos","formato","replace","obterTentativas","obterResultado","telaTermo","pnlTermo","document","getElementById","pnlTeclado","btnEnter","lbNotificacao","trHistorico","linha","coluna","termo","botoesClicados","gravador","atualizarHistorico","registrarEventos","console","log","childNodes","forEach","b","botao","id","addEventListener","sender","atualizarJogo","avaliarPalavra","target","push","querySelectorAll","textContent","resetarJogo","lista","atualizarEstilo","verificarResultado","j","celula","style","backgroundColor","disabled","display","className","gravarHistorico","children","window"],"sourceRoot":""}